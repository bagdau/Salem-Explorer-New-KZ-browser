import os
import sys
import time
import ctypes
import win32gui
import win32api
import win32con
import win32com.client
from ctypes.wintypes import HWND, DWORD
from ctypes import windll, POINTER, byref
from utils.blur import enable_acrylic
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtCore import Qt
from ctypes.wintypes import HWND, DWORD, BOOL
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel
from PyQt5.QtGui import QPainter, QColor
from PyQt5.QtWidgets import QGraphicsBlurEffect
from PyQt5.QtCore import QPropertyAnimation, QPoint, QTimer
from PyQt5.QtWidgets import QFileDialog, QPlainTextEdit
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QHBoxLayout, QVBoxLayout, QPushButton, QWidget, QLineEdit, QLabel, QTabWidget, QComboBox, QListWidget, QProgressBar
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWebEngineWidgets import QWebEngineSettings
from PyQt5.QtCore import QTimer, QPropertyAnimation, QPoint
from PyQt5.QtWidgets import QFileDialog, QMenu, QAction
from PyQt5.QtWidgets import QMenu, QAction
from PyQt5.QtWidgets import QMenu, QAction
from PyQt5.QtWidgets import QMenu, QAction, QInputDialog
from PyQt5.QtCore import QUrl, Qt, QTimer, QDateTime
from PyQt5.QtGui import QColor, QPalette
from selenium import webdriver
from selenium.webdriver.common.proxy import Proxy, ProxyType
from PyQt5.QtMultimedia import QSoundEffect
from google_auth_oauthlib.flow import InstalledAppFlow
from PyQt5.QtCore import QThread, pyqtSignal
from urllib.parse import quote


class AccentPolicy(ctypes.Structure):
    _fields_ = [("nAccentState", DWORD), ("nFlags", DWORD), ("nColor", DWORD), ("nAnimationId", DWORD)]

class WindowCompositionAttributeData(ctypes.Structure):
    _fields_ = [("nAttribute", DWORD), ("pData", POINTER(AccentPolicy)), ("ulDataSize", DWORD)]

    def enable_acrylic(hwnd):
        accent_policy = AccentPolicy()
        accent_policy.nAccentState = 3  # ACCENT_ENABLE_BLURBEHIND
        accent_policy.nFlags = 2
        accent_policy.nColor = 0x99FFFFFF  # –¶–≤–µ—Ç –∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        accent_policy.nAnimationId = 0

        data = WindowCompositionAttributeData()
        data.nAttribute = 19  # WCA_ACCENT_POLICY
        data.pData = byref(accent_policy)
        data.ulDataSize = ctypes.sizeof(accent_policy)

        windll.user32.SetWindowCompositionAttribute(hwnd, byref(data))


class SalemBrowser(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setAttribute(Qt.WA_TranslucentBackground, True)
        hwnd = self.winId().__int__()  # –ü–æ–ª—É—á–∞–µ–º HWND –æ–∫–Ω–∞
        enable_acrylic(hwnd)  # –í–∫–ª—é—á–∞–µ–º Acrylic Blur

        self.setWindowIcon(QIcon("img/icons/DES.ico"))
        self.setStyleSheet("background-color: #1a1a1a;")
        self.setWindowTitle("Salem Corp. Browser (–ë–µ—Ç–∞ - –≤–µ—Ä—Å–∏—è)")
        self.setGeometry(50, 50, 1000, 600)
        

        self.tabs = QTabWidget()
        self.tabs.setDocumentMode(True)
        self.tabs.setTabsClosable(True)
        self.tabs.tabCloseRequested.connect(self.close_current_tab)
        self.tabs.setStyleSheet("QTabBar::tab { height: 30px; width: 120px; background-color: #282a36; color: #f8f8f2; border: 1px solid #44475a; border-radius: 4px; padding: 5px; } QTabBar::tab:selected { background-color: #6272a4; }")

        self.title_label = QLabel("S/alem Corp. Browser")
        self.title_label.setStyleSheet("color: rgb(48, 211, 252); font-weight: bold; padding: 10px;")



        banner = QWidget()
        banner_layout = QVBoxLayout()
        nav_layout = QHBoxLayout()
        banner.setStyleSheet("""
    background: rgba(40, 42, 54, 0.5); /* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω */
    border: 2px solid rgba(255, 0, 127, 0.6); /* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ */
    border-radius: 15px;
    padding: 15px;
    backdrop-filter: blur(12px); /* –†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞ */
    transition: all 0.3s ease-in-out;
    """)
        
        
        self.add_new_tab(QUrl.fromLocalFile("https://start.duckduckgo.com/"), "“Æ–π")

        nav_bar = QWidget()
        nav_layout = QHBoxLayout()
        nav_bar.setStyleSheet("background-color: #282a36; padding: 5px; border: 1px solid #44475a;")

        self.url_bar = QLineEdit()
        self.url_bar.setPlaceholderText("URL –º–µ–∫–µ–Ω–∂–∞–π –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑...")
        self.url_bar.setFixedHeight(25)
        self.url_bar.setMinimumWidth(300)
        self.url_bar.returnPressed.connect(self.navigate_to_url)

        self.url_bar.setStyleSheet("""
    QLineEdit {
        background-color: #44475a;
        color: #f8f8f2;
        border: 1px solid #6272a4;
        border-radius: 5px;
        padding: 5px;
        transition: all 0.3s ease-in-out; /* –ü–ª–∞–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç */
    }
    
    QLineEdit:hover {
        border: 1px solid #8be9fd; /* –ì–æ–ª—É–±–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
        background-color: #505a78;
    }
    
    QLineEdit:focus {
        border: 1px solid #ff79c6; /* –†–æ–∑–æ–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ */
        background-color: #6272a4;
    }
""")


        # Buttons with fixed sizes
        back_btn = self.create_nav_button("‚óÄ", self.navigate_back)
        forward_btn = self.create_nav_button("‚ñ∂", self.navigate_forward)
        refresh_btn = self.create_nav_button("‚Üª", self.refresh_page)
        home_btn = self.create_nav_button("‚©é", self.navigate_home)
        new_tab_btn = self.create_nav_button("‚ûï", self.open_new_tab)
        add_block_btn = self.create_nav_button("‚®∂", self.enable_add_block)
        anti_tracker_btn = self.create_nav_button("‚©í", self.enable_anti_tracker)
        user_account_btn = self.create_nav_button("üßë", self.enable_user_account)
        menu_btn = self.create_nav_button("‚ò∞", self.open_menu)

        self.downloads_panel = QListWidget()
        self.downloads_panel.hide()  # –°–∫—Ä—ã–≤–∞–µ–º, –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞


        downloads_btn = QPushButton("üì•")
        downloads_btn.setFixedSize(50, 25)
        downloads_btn.clicked.connect(self.toggle_downloads_panel)
        downloads_btn.setStyleSheet(self.button_style())


        open_file_btn = self.create_nav_button("üìÇ", self.open_file)
        nav_layout.addWidget(open_file_btn)


        # Adding widgets to navigation bar
        nav_layout.addWidget(back_btn)
        nav_layout.addWidget(forward_btn)
        nav_layout.addWidget(refresh_btn)
        nav_layout.addWidget(home_btn)
        nav_layout.addWidget(new_tab_btn)
        nav_layout.addWidget(self.url_bar)
        nav_layout.addWidget(user_account_btn)
        nav_layout.addWidget(add_block_btn)
        nav_layout.addWidget(anti_tracker_btn)
        nav_layout.addWidget(downloads_btn)
        nav_layout.addWidget(menu_btn)

        nav_bar.setLayout(nav_layout)

        central_widget = QWidget()
        central_layout = QVBoxLayout()
        central_layout.addWidget(nav_bar)
        central_layout.addWidget(self.tabs)

        central_widget.setLayout(central_layout)
        self.setCentralWidget(central_widget)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
        self.tabs.currentWidget().page().profile().downloadRequested.connect(self.handle_download_request)

        # Open initial tab
        # Open initial tab
        self.add_new_tab(QUrl("https://start.duckduckgo.com/"), "–®–∞“£—ã—Ä–∞“õ")
        self.set_user_agent()


    def set_user_agent(self):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π User-Agent –∏ –≤–∫–ª—é—á–∞–µ—Ç JavaScript.
        """

        # –ú–µ–Ω—è–µ–º User-Agent –Ω–∞ Firefox (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π)
        custom_user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"


        profile = self.tabs.currentWidget().page().profile()
        profile.setHttpUserAgent(custom_user_agent)

        # –í–∫–ª—é—á–∞–µ–º JavaScript, WebGL –∏ GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ
        settings = self.tabs.currentWidget().settings()
        settings.setAttribute(QWebEngineSettings.LocalStorageEnabled, True)  # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        settings.setAttribute(QWebEngineSettings.PluginsEnabled, True)  # –ü–ª–∞–≥–∏–Ω—ã
        settings.setAttribute(QWebEngineSettings.AllowRunningInsecureContent, True)  # –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        settings.setAttribute(QWebEngineSettings.JavascriptCanOpenWindows, True)  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞
        settings.setAttribute(QWebEngineSettings.JavascriptCanAccessClipboard, True)  # –î–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞
        settings.setAttribute(QWebEngineSettings.XSSAuditingEnabled, False)  # –û—Ç–∫–ª—é—á–∏—Ç—å XSS-–∑–∞—â–∏—Ç—É (–∏–Ω–æ–≥–¥–∞ –º–µ—à–∞–µ—Ç)


        print("‚úÖ User-Agent —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", custom_user_agent)
        print("‚úÖ JavaScript, WebGL –∏ GPU –≤–∫–ª—é—á–µ–Ω—ã")


         # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
        self.tabs.currentWidget().page().profile().downloadRequested.connect(self.handle_download_request)

    def create_nav_button(self, text, callback):
        button = QPushButton(text)
        button.setFixedSize(40, 25)
        button.clicked.connect(callback)
        return button

    def mousePressEvent(self, event):
        self.old_pos = event.globalPos()

    def mouseMoveEvent(self, event):
        if event.buttons() == Qt.LeftButton:
            delta = QPoint(event.globalPos() - self.old_pos)
            self.move(self.x() + delta.x(), self.y() + delta.y())
            self.old_pos = event.globalPos()

    def create_nav_button(self, text, callback):
        button = QPushButton(text)
        button.setFixedSize(90, 25)
        button.setStyleSheet(self.button_style())
        button.clicked.connect(callback)
        return button

    def button_style(self):
     return """
        QPushButton {
            background: linear-gradient(135deg, #0ff0e4, #068ce6);
            color: #f8f8f2;
            border: 1px solid rgba(255, 255, 255, 0.3); /* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ */
            border-radius: 5px;
            padding: 5px 5px;
            font-size: 18px;
            backdrop-filter: blur(8px); /* –†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞ */
            transition: all 0.3s ease-in-out;
            min-width: 50px;
        }

        QPushButton:hover {
            background: rgba(98, 114, 164, 0.6); /* –°–≤–µ—Ç–ª–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
            border: 1px solid rgba(139, 233, 253, 0.8);
            color: #ffffff;
            transform: scale(1.05);
        }

        QPushButton:pressed {
            background: rgba(255, 121, 198, 0.6);
            border: 1px solid rgba(189, 147, 249, 0.8);
            color: #282a36;
            transform: scale(0.95); /* –õ–µ–≥–∫–æ–µ —Å–∂–∞—Ç–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ */
        }
    """


    def add_new_tab(self, qurl, label):
        browser = QWebEngineView()
        browser.setUrl(qurl)
        i = self.tabs.addTab(browser, label)
        self.tabs.setCurrentIndex(i)

    def navigate_home(self):
        self.url_bar.setText("https://officialcorporationsalem.kz/browserMainPagePreview.html")
        self.navigate_to_url()

    def navigate_to_url(self):
        url = self.url_bar.text()
        if not url.startswith("http://") and not url.startswith("https://"):
            url = "file://" + url
        current_browser = self.tabs.currentWidget()
        if current_browser:
            current_browser.setUrl(QUrl(url))

    def navigate_back(self):
        current_browser = self.tabs.currentWidget()
        if current_browser:
            current_browser.back()

    def navigate_forward(self):
        current_browser = self.tabs.currentWidget()
        if current_browser:
            current_browser.forward()

    def refresh_page(self):
        current_browser = self.tabs.currentWidget()
        if current_browser:
            current_browser.reload()

    def open_new_tab(self):
        self.add_new_tab(QUrl("https://officialcorporationsalem.kz/browserMainPagePreview.html"), "–ñ–∞“£–∞ –±–µ—Ç")

    def eventFilter(self, obj, event):
        if event.type() == Qt.KeyPress:
            if event.key() == Qt.Key_F12:
                self.open_dev_tools()
                return True
            elif event.key() == Qt.Key_U and event.modifiers() & Qt.ControlModifier:
                self.view_page_source()
                return True
        return super().eventFilter(obj, event)

    def open_dev_tools(self):
        if self.tabs.count() > 0:
            current_webview = self.tabs.currentWidget()
            if isinstance(current_webview, QWebEngineView):
                current_webview.page().setDevToolsPage(QWebEngineView().page())
                dev_tools = QWebEngineView()
                dev_tools.setPage(current_webview.page().devToolsPage())
                dev_tools.setWindowTitle("DevTools")
                dev_tools.resize(800, 600)
                dev_tools.show()

    def view_page_source(self):
        if self.tabs.count() > 0:
            current_webview = self.tabs.currentWidget()
            if isinstance(current_webview, QWebEngineView):
                current_webview.page().toHtml(lambda html: self.show_source_code(html))

    def show_source_code(self, html):
        source_window = QWidget()
        source_window.setWindowTitle("Source Code")
        layout = QVBoxLayout()
        source_label = QLabel()
        source_label.setTextInteractionFlags(Qt.TextSelectableByMouse)
        source_label.setText(html)
        layout.addWidget(source_label)
        source_window.setLayout(layout)
        source_window.resize(800, 600)
        source_window.show()

    def enable_add_block(self):
        print("–ñ–∞—Ä–Ω–∞–º–∞–Ω—ã –±“±“ì–∞—Ç—Ç–∞—É —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã")
    
                 # Check if browser attribute exists, initialize it if needed
        if not hasattr(self, 'browser'):
            print("–û—à–∏–±–∫–∞: browser attribute not initialized!")
            return

                   # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = self.browser.page()
    
                   # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
        ad_keywords = ["ads", "advert", "banner", "popup", "sponsored"]
    
                   # JavaScript-–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∫–ª–∞–º—ã
        block_ads_script = """
                function blockAds() {
                    let adSelectors = ['iframe', 'div', 'span', 'section'];
                    let adKeywords = ['ads', 'advert', 'banner', 'popup', 'sponsored'];
        
                adSelectors.forEach(tag => {
                    document.querySelectorAll(tag).forEach(el => {
                        if (adKeywords.some(keyword => el.className.includes(keyword) || el.id.includes(keyword))) {
                            el.remove();
                        }
                    });
                });
        }
        blockAds();
        """
    
          # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page.runJavaScript(block_ads_script)
        print("–†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
        

    def enable_anti_tracker(self):
        print("–ê–Ω—Ç–∏-—Ç—Ä–µ–∫–µ—Ä —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã (To be implemented)") 

    def enable_user_account(self):
        print("–ï—Å–µ–ø—Ç—ñ–∫ –∂–∞–∑–±–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã (To be implemented)")
    
    def close_current_tab(self, index):
        if self.tabs.count() > 1:
            self.tabs.removeTab(index)

    def toggle_downloads_panel(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–æ–∫"""
        if self.downloads_panel.isVisible():
           self.downloads_panel.hide()
        else:
           self.downloads_panel.show()

    def handle_download_request(self, download):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤"""
        suggested_path, _ = QFileDialog.getSaveFileName(self, "–§–∞–π–ª–¥—ã —Å–∞“õ—Ç–∞—É", "", "All Files (*.*)")

        if suggested_path:
           download.setPath(suggested_path)
           download.accept()
           self.update_downloads(suggested_path)

    def update_downloads(self, file_path):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.downloads_panel.addItem(f"‚úÖ –ñ“Ø–∫—Ç–µ–ª–¥—ñ: {file_path}")
        self.downloads_panel.show()


    def open_menu(self):
        menu = QMenu(self)

        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é
        actions = [
            ("–ñ–∞“£–∞ “õ–æ–π—ã–Ω–¥—ã", self.open_new_tab),  # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
            ("–ñ–∞“£–∞ —Ç–µ—Ä–µ–∑–µ", self.open_new_window),  # –ù–æ–≤–æ–µ –æ–∫–Ω–æ
            ("–ñ–∞“£–∞ “õ“±–ø–∏—è —Ç–µ—Ä–µ–∑–µ", self.open_incognito_window),  # –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ
            ("–ñ—É—Ä–Ω–∞–ª", self.show_history),  # –ò—Å—Ç–æ—Ä–∏—è
            ("–ñ“Ø–∫—Ç–µ—É–ª–µ—Ä", self.toggle_downloads_panel),  # –ó–∞–≥—Ä—É–∑–∫–∏
            ("“ö“±–ø–∏—è—Å”©–∑–¥–µ—Ä", self.manage_passwords),  # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π
            ("“ö–æ—Å—ã–º—à–∞–ª–∞—Ä –º–µ–Ω —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä", self.open_extensions),  # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è
            ("–ë–∞—Å—ã–ø —à—ã“ì–∞—Ä—É", self.print_page),  # –ü–µ—á–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            ("“ö–∞–ª–∞–π —Å–∞“õ—Ç–∞—É", self.save_page),  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...
            ("–ë–µ—Ç—Ç–µ–Ω —ñ–∑–¥–µ—É", self.search_on_page),  # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            ("–≠–∫—Ä–∞–Ω –º–∞—Å—à—Ç–∞–±—ã", self.zoom_menu),  # –ú–∞—Å—à—Ç–∞–±
            ("–ë–∞–ø—Ç–∞—É–ª–∞—Ä", self.open_settings),  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            ("–ë–∞—Å“õ–∞ “õ“±—Ä–∞–ª–¥–∞—Ä", self.open_dev_tools),  # DevTools
            ("–ê–Ω—ã“õ—Ç–∞–º–∞", self.open_help),  # –°–ø—Ä–∞–≤–∫–∞
            ("–®—ã“ì—É", self.close)  # –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
    ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        for label, function in actions:
            action = QAction(label, self)
            action.triggered.connect(function)
            menu.addAction(action)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        menu.exec_(self.mapToGlobal(self.menuBar().pos()))

    def open_new_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        new_window = SalemBrowser()
        new_window.show()

    def open_incognito_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ-—Ä–µ–∂–∏–º (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ)"""
        new_incognito = SalemBrowser()
        new_incognito.show()

    def show_history(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏"""
        self.add_new_tab(QUrl("chrome://history/"), "–ñ—É—Ä–Ω–∞–ª")

    def toggle_downloads_panel(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–æ–∫"""
        if self.downloads_panel.isVisible():
           self.downloads_panel.hide()
        else:
            self.downloads_panel.show()

    def manage_passwords(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π"""
        self.add_new_tab(QUrl("chrome://passwords/"), "“ö“±–ø–∏—è—Å”©–∑–¥–µ—Ä")

    def open_extensions(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        self.add_new_tab(QUrl("chrome://extensions/"), "“ö–æ—Å—ã–º—à–∞–ª–∞—Ä")

    def print_page(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–µ—á–∞—Ç–∏"""
        if self.tabs.currentWidget():
           self.tabs.currentWidget().page().printToPdf("saved_page.pdf")

    def search_on_page(self):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        text, ok = QInputDialog.getText(self, "–Ü–∑–¥–µ—É", "–Ü–∑–¥–µ—É –º”ô—Ç—ñ–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        if ok and text:
           self.tabs.currentWidget().findText(text)

    def open_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.add_new_tab(QUrl("chrome://settings/"), "–ë–∞–ø—Ç–∞—É–ª–∞—Ä")

    def open_help(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–º–æ—â–∏"""
        self.add_new_tab(QUrl("https://support.google.com/"), "–ê–Ω—ã“õ—Ç–∞–º–∞")

    def zoom_menu(self):
        """–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞"""
        zoom_levels = ["50%", "75%", "100%", "125%", "150%", "200%"]
        zoom, ok = QInputDialog.getItem(self, "–ú–∞—Å—à—Ç–∞–±", "–¢–∞“£–¥–∞“£—ã–∑:", zoom_levels, 2, False)
        if ok:
           scale = int(zoom.replace("%", "")) / 100
           if self.tabs.currentWidget():
              self.tabs.currentWidget().setZoomFactor(scale)


    def open_file(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (PDF, HTML, XML, YAML, CSS, JS, TS) –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π.
        """
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", "", 
            "–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (*.pdf *.html *.xml *.yaml *.yml *.css *.js *.ts);;PDF —Ñ–∞–π–ª—ã (*.pdf);;HTML —Ñ–∞–π–ª—ã (*.html);;XML —Ñ–∞–π–ª—ã (*.xml);;YAML —Ñ–∞–π–ª—ã (*.yaml *.yml);;CSS —Ñ–∞–π–ª—ã (*.css);;JavaScript —Ñ–∞–π–ª—ã (*.js);;TypeScript —Ñ–∞–π–ª—ã (*.ts)", options=options)
    
        if file_path:
           file_extension = os.path.splitext(file_path)[1].lower()

           if file_extension == ".pdf":
               # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —á–µ—Ä–µ–∑ QWebEngineView
              self.add_new_tab(QUrl.fromLocalFile(file_path), f"PDF: {os.path.basename(file_path)}")

        elif file_extension in [".html", ".xml", ".yaml", ".yml", ".css", ".js", ".ts"]:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ QPlainTextEdit (–±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π)
            with open(file_path, "r", encoding="utf-8") as file:
                content = file.read()
            
                text_editor = QPlainTextEdit()
                text_editor.setPlainText(content)
                text_editor.setReadOnly(True)  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

                index = self.tabs.addTab(text_editor, f"–§–∞–π–ª: {os.path.basename(file_path)}")
                self.tabs.setCurrentIndex(index)
        
        else:
            print("‚ö† –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")

    def handle_file_loaded(self, file_path, file_type, content):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ `viewer.html` –∏–ª–∏ PDF-–≤—å—é–µ—Ä.
        """
        if file_type == "pdf":
              # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –≤ –±—Ä–∞—É–∑–µ—Ä–µ
              self.add_new_tab(QUrl.fromLocalFile(file_path), f"PDF: {os.path.basename(file_path)}")

        elif file_type == "text":
              # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ `viewer.html`
              local_viewer_path = os.path.abspath("viewer.html")
              local_viewer_url = QUrl.fromLocalFile(local_viewer_path).toString()

              # –ö–æ–¥–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (—á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
              encoded_file_url = quote(QUrl.fromLocalFile(file_path).toString(), safe=':/')

              # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL
              full_url = f"{local_viewer_url}?file={encoded_file_url}"

              # –û—Ç–∫—Ä—ã–≤–∞–µ–º `viewer.html` —Å —Ñ–∞–π–ª–æ–º
              self.add_new_tab(QUrl(full_url), f"–§–∞–π–ª: {os.path.basename(file_path)}")

        else:
            print(f"‚ö† –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ `{file_path}` –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")


    
    def show_context_menu(self, pos):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é, –∫–∞–∫ –≤ Google Chrome."""
        menu = QMenu(self)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        back_action = QAction("‚¨Ö –ù–∞–∑–∞–¥", self)
        back_action.triggered.connect(self.navigate_back)

        forward_action = QAction("‚û° –í–ø–µ—Ä—ë–¥", self)
        forward_action.triggered.connect(self.navigate_forward)

        reload_action = QAction("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self)
        reload_action.triggered.connect(self.refresh_page)

        save_action = QAction("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", self)
        save_action.triggered.connect(self.save_page)

        copy_link_action = QAction("üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", self)
        copy_link_action.triggered.connect(self.copy_link)

        devtools_action = QAction("‚öô –û—Ç–∫—Ä—ã—Ç—å DevTools", self)
        devtools_action.triggered.connect(self.open_dev_tools)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é
        menu.addAction(back_action)
        menu.addAction(forward_action)
        menu.addAction(reload_action)
        menu.addSeparator()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        menu.addAction(save_action)
        menu.addAction(copy_link_action)
        menu.addSeparator()
        menu.addAction(devtools_action)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–∞–º, –≥–¥–µ –∫–ª–∏–∫–Ω—É–ª–∏
        menu.exec_(self.mapToGlobal(pos))

    def navigate_back(self):
        """–ù–∞–∑–∞–¥"""
        if self.tabs.currentWidget():
           self.tabs.currentWidget().back()

    def navigate_forward(self):
        """–í–ø–µ—Ä—ë–¥"""
        if self.tabs.currentWidget():
           self.tabs.currentWidget().forward()

    def refresh_page(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if self.tabs.currentWidget():
           self.tabs.currentWidget().reload()

    def save_page(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        current_browser = self.tabs.currentWidget()
        if current_browser:
           file_path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫", "", "HTML —Ñ–∞–π–ª—ã (*.html);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)")
           if file_path:
              current_browser.page().toHtml(lambda html: open(file_path, "w", encoding="utf-8").write(html))

    def copy_link(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π URL –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        clipboard = QApplication.clipboard()
        clipboard.setText(self.url_bar.text())
        print("üîó –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:", self.url_bar.text())

    def open_dev_tools(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç DevTools (–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)"""
        if self.tabs.count() > 0:
           current_webview = self.tabs.currentWidget()
           if isinstance(current_webview, QWebEngineView):
              current_webview.page().setDevToolsPage(QWebEngineView().page())

class FileLoaderThread(QThread):
    file_loaded = pyqtSignal(str, str, object)  # file_path, file_type, content

    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª"""
        file_extension = os.path.splitext(self.file_path)[1].lower()

        try:
            if file_extension == ".pdf":
                self.file_loaded.emit(self.file_path, "pdf", None)

            elif file_extension in [".html", ".xml", ".yaml", ".yml", ".css", ".js", ".ts"]:
                with open(self.file_path, "r", encoding="utf-8") as file:
                    content = file.read()
                self.file_loaded.emit(self.file_path, "text", content)

            else:
                self.file_loaded.emit(self.file_path, "unsupported", None)

        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {self.file_path}: {e}")
    def open_file(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (PDF, HTML, XML, YAML, CSS, JS, TS) –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        """
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", "", 
            "–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (*.pdf *.html *.xml *.yaml *.yml *.css *.js *.ts);;PDF —Ñ–∞–π–ª—ã (*.pdf);;HTML —Ñ–∞–π–ª—ã (*.html);;XML —Ñ–∞–π–ª—ã (*.xml);;YAML —Ñ–∞–π–ª—ã (*.yaml *.yml);;CSS —Ñ–∞–π–ª—ã (*.css);;JavaScript —Ñ–∞–π–ª—ã (*.js);;TypeScript —Ñ–∞–π–ª—ã (*.ts)", options=options)

        if file_path:
           self.loader_thread = FileLoaderThread(file_path)
           self.loader_thread.file_loaded.connect(self.handle_file_loaded)
           self.loader_thread.start()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    browser = SalemBrowser()
    browser.show()
    sys.exit(app.exec_())   


